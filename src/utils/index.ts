import _ from 'lodash';

import type { SliceString } from '../types';

/**
 * The generateStaticID function generates a unique ID by converting a given text or a random string into a sequence of
 * numbers based on the ASCII code of each character
 *
 * @param {string | null} [text] - An optional string used as part of the generated ID. If not provided, a random string will be generated.
 * @param {string} [prefix='sUUID:'] - A string used as a prefix for the generated ID. If no text parameter is provided, the generated ID will start with this prefix. The default value for prefix is 'sUUID:'.
 * @returns The createUniqueId function returns a string that consists of a prefix (default value is 'sUUID:') and a sequence of numbers generated from the input text
 * or a random string if text is not provided. The sequence of numbers is generated by converting each character in the input string to
 * its corresponding ASCII code and subtracting 64 from it if it falls between 65 and 90 (inclusive).
 */
export function generateStaticID(
  text?: string | null,
  prefix: string = 'sUUID:'
): string {
  const generateRandomString = (): string =>
    Math.random().toString(36).substring(7);
  const convertToAsciiSequence = (input: string): string =>
    input
      .toUpperCase()
      .split('')
      .map((char) => {
        const code = char.charCodeAt(0);
        return code > 64 && code < 91 ? code - 64 : '';
      })
      .join('');

  const newText = text || generateRandomString();
  const asciiSequence = convertToAsciiSequence(newText);
  return `${text ? '' : prefix}:${asciiSequence}`;
}

/**
 * Capitalizes the first letter of the input string.
 * @param {T} string - Input string of type `T` that extends the `string` type.
 * @returns Capitalized version of the input string using TypeScript's `Capitalize` utility type.
 */
export const capitalize = <T extends string>(string: T): Capitalize<T> => {
  return _.capitalize(string) as Capitalize<T>;
};

/**
 * Appends a generated static ID to the input string.
 * @param {T} string - Input string of type `T` that extends the `string` type.
 * @returns A new string with the generated static ID appended to the input string, using the same type `T`.
 */
export const appendStringWithStaticID = <T extends string>(string: T) => {
  return `${generateStaticID(string)}` as T;
};

/**
 * Appends a static ID to the input string and capitalizes it.
 * @param {T} append - The input string of type `T` to be appended with a static ID.
 * @param {S} string - The input string of type `S` to be capitalized.
 * @returns A new string resulting from appending the static ID and capitalizing the input string.
 */
export const sliceString = <T extends string, S extends string>(
  append: T,
  string: S
): SliceString<S, T> =>
  `${string}${capitalize(appendStringWithStaticID(append))}`;

export const sliceSelectorString = (name: string, key: string) => {
  const _case = `${name} ${key}`;
  return `select${_.startCase(_case).replaceAll(' ', '')}`;
};
